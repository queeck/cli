// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bus

import (
	"sync"
	"time"
)

// argumentsMock is a mock implementation of arguments.
//
//	func TestSomethingThatUsesarguments(t *testing.T) {
//
//		// make and configure a mocked arguments
//		mockedarguments := &argumentsMock{
//			CommandsFunc: func() []string {
//				panic("mock out the Commands method")
//			},
//			FlagsFunc: func() []string {
//				panic("mock out the Flags method")
//			},
//			HasFlagFunc: func(flag string) bool {
//				panic("mock out the HasFlag method")
//			},
//			OptionFunc: func(option string) (string, bool) {
//				panic("mock out the Option method")
//			},
//			OptionsFunc: func() map[string]string {
//				panic("mock out the Options method")
//			},
//			PositionalArgumentsFunc: func() []string {
//				panic("mock out the PositionalArguments method")
//			},
//			ToMapFunc: func() map[string]any {
//				panic("mock out the ToMap method")
//			},
//		}
//
//		// use mockedarguments in code that requires arguments
//		// and then make assertions.
//
//	}
type argumentsMock struct {
	// CommandsFunc mocks the Commands method.
	CommandsFunc func() []string

	// FlagsFunc mocks the Flags method.
	FlagsFunc func() []string

	// HasFlagFunc mocks the HasFlag method.
	HasFlagFunc func(flag string) bool

	// OptionFunc mocks the Option method.
	OptionFunc func(option string) (string, bool)

	// OptionsFunc mocks the Options method.
	OptionsFunc func() map[string]string

	// PositionalArgumentsFunc mocks the PositionalArguments method.
	PositionalArgumentsFunc func() []string

	// ToMapFunc mocks the ToMap method.
	ToMapFunc func() map[string]any

	// calls tracks calls to the methods.
	calls struct {
		// Commands holds details about calls to the Commands method.
		Commands []struct {
		}
		// Flags holds details about calls to the Flags method.
		Flags []struct {
		}
		// HasFlag holds details about calls to the HasFlag method.
		HasFlag []struct {
			// Flag is the flag argument value.
			Flag string
		}
		// Option holds details about calls to the Option method.
		Option []struct {
			// Option is the option argument value.
			Option string
		}
		// Options holds details about calls to the Options method.
		Options []struct {
		}
		// PositionalArguments holds details about calls to the PositionalArguments method.
		PositionalArguments []struct {
		}
		// ToMap holds details about calls to the ToMap method.
		ToMap []struct {
		}
	}
	lockCommands            sync.RWMutex
	lockFlags               sync.RWMutex
	lockHasFlag             sync.RWMutex
	lockOption              sync.RWMutex
	lockOptions             sync.RWMutex
	lockPositionalArguments sync.RWMutex
	lockToMap               sync.RWMutex
}

// Commands calls CommandsFunc.
func (mock *argumentsMock) Commands() []string {
	if mock.CommandsFunc == nil {
		panic("argumentsMock.CommandsFunc: method is nil but arguments.Commands was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCommands.Lock()
	mock.calls.Commands = append(mock.calls.Commands, callInfo)
	mock.lockCommands.Unlock()
	return mock.CommandsFunc()
}

// CommandsCalls gets all the calls that were made to Commands.
// Check the length with:
//
//	len(mockedarguments.CommandsCalls())
func (mock *argumentsMock) CommandsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommands.RLock()
	calls = mock.calls.Commands
	mock.lockCommands.RUnlock()
	return calls
}

// Flags calls FlagsFunc.
func (mock *argumentsMock) Flags() []string {
	if mock.FlagsFunc == nil {
		panic("argumentsMock.FlagsFunc: method is nil but arguments.Flags was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFlags.Lock()
	mock.calls.Flags = append(mock.calls.Flags, callInfo)
	mock.lockFlags.Unlock()
	return mock.FlagsFunc()
}

// FlagsCalls gets all the calls that were made to Flags.
// Check the length with:
//
//	len(mockedarguments.FlagsCalls())
func (mock *argumentsMock) FlagsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFlags.RLock()
	calls = mock.calls.Flags
	mock.lockFlags.RUnlock()
	return calls
}

// HasFlag calls HasFlagFunc.
func (mock *argumentsMock) HasFlag(flag string) bool {
	if mock.HasFlagFunc == nil {
		panic("argumentsMock.HasFlagFunc: method is nil but arguments.HasFlag was just called")
	}
	callInfo := struct {
		Flag string
	}{
		Flag: flag,
	}
	mock.lockHasFlag.Lock()
	mock.calls.HasFlag = append(mock.calls.HasFlag, callInfo)
	mock.lockHasFlag.Unlock()
	return mock.HasFlagFunc(flag)
}

// HasFlagCalls gets all the calls that were made to HasFlag.
// Check the length with:
//
//	len(mockedarguments.HasFlagCalls())
func (mock *argumentsMock) HasFlagCalls() []struct {
	Flag string
} {
	var calls []struct {
		Flag string
	}
	mock.lockHasFlag.RLock()
	calls = mock.calls.HasFlag
	mock.lockHasFlag.RUnlock()
	return calls
}

// Option calls OptionFunc.
func (mock *argumentsMock) Option(option string) (string, bool) {
	if mock.OptionFunc == nil {
		panic("argumentsMock.OptionFunc: method is nil but arguments.Option was just called")
	}
	callInfo := struct {
		Option string
	}{
		Option: option,
	}
	mock.lockOption.Lock()
	mock.calls.Option = append(mock.calls.Option, callInfo)
	mock.lockOption.Unlock()
	return mock.OptionFunc(option)
}

// OptionCalls gets all the calls that were made to Option.
// Check the length with:
//
//	len(mockedarguments.OptionCalls())
func (mock *argumentsMock) OptionCalls() []struct {
	Option string
} {
	var calls []struct {
		Option string
	}
	mock.lockOption.RLock()
	calls = mock.calls.Option
	mock.lockOption.RUnlock()
	return calls
}

// Options calls OptionsFunc.
func (mock *argumentsMock) Options() map[string]string {
	if mock.OptionsFunc == nil {
		panic("argumentsMock.OptionsFunc: method is nil but arguments.Options was just called")
	}
	callInfo := struct {
	}{}
	mock.lockOptions.Lock()
	mock.calls.Options = append(mock.calls.Options, callInfo)
	mock.lockOptions.Unlock()
	return mock.OptionsFunc()
}

// OptionsCalls gets all the calls that were made to Options.
// Check the length with:
//
//	len(mockedarguments.OptionsCalls())
func (mock *argumentsMock) OptionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockOptions.RLock()
	calls = mock.calls.Options
	mock.lockOptions.RUnlock()
	return calls
}

// PositionalArguments calls PositionalArgumentsFunc.
func (mock *argumentsMock) PositionalArguments() []string {
	if mock.PositionalArgumentsFunc == nil {
		panic("argumentsMock.PositionalArgumentsFunc: method is nil but arguments.PositionalArguments was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPositionalArguments.Lock()
	mock.calls.PositionalArguments = append(mock.calls.PositionalArguments, callInfo)
	mock.lockPositionalArguments.Unlock()
	return mock.PositionalArgumentsFunc()
}

// PositionalArgumentsCalls gets all the calls that were made to PositionalArguments.
// Check the length with:
//
//	len(mockedarguments.PositionalArgumentsCalls())
func (mock *argumentsMock) PositionalArgumentsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPositionalArguments.RLock()
	calls = mock.calls.PositionalArguments
	mock.lockPositionalArguments.RUnlock()
	return calls
}

// ToMap calls ToMapFunc.
func (mock *argumentsMock) ToMap() map[string]any {
	if mock.ToMapFunc == nil {
		panic("argumentsMock.ToMapFunc: method is nil but arguments.ToMap was just called")
	}
	callInfo := struct {
	}{}
	mock.lockToMap.Lock()
	mock.calls.ToMap = append(mock.calls.ToMap, callInfo)
	mock.lockToMap.Unlock()
	return mock.ToMapFunc()
}

// ToMapCalls gets all the calls that were made to ToMap.
// Check the length with:
//
//	len(mockedarguments.ToMapCalls())
func (mock *argumentsMock) ToMapCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockToMap.RLock()
	calls = mock.calls.ToMap
	mock.lockToMap.RUnlock()
	return calls
}

// stateMock is a mock implementation of state.
//
//	func TestSomethingThatUsesstate(t *testing.T) {
//
//		// make and configure a mocked state
//		mockedstate := &stateMock{
//			TimeFunc: func() time.Time {
//				panic("mock out the Time method")
//			},
//		}
//
//		// use mockedstate in code that requires state
//		// and then make assertions.
//
//	}
type stateMock struct {
	// TimeFunc mocks the Time method.
	TimeFunc func() time.Time

	// calls tracks calls to the methods.
	calls struct {
		// Time holds details about calls to the Time method.
		Time []struct {
		}
	}
	lockTime sync.RWMutex
}

// Time calls TimeFunc.
func (mock *stateMock) Time() time.Time {
	if mock.TimeFunc == nil {
		panic("stateMock.TimeFunc: method is nil but state.Time was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTime.Lock()
	mock.calls.Time = append(mock.calls.Time, callInfo)
	mock.lockTime.Unlock()
	return mock.TimeFunc()
}

// TimeCalls gets all the calls that were made to Time.
// Check the length with:
//
//	len(mockedstate.TimeCalls())
func (mock *stateMock) TimeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTime.RLock()
	calls = mock.calls.Time
	mock.lockTime.RUnlock()
	return calls
}

// templatesMock is a mock implementation of templates.
//
//	func TestSomethingThatUsestemplates(t *testing.T) {
//
//		// make and configure a mocked templates
//		mockedtemplates := &templatesMock{
//			RenderCommonQuitFunc: func() string {
//				panic("mock out the RenderCommonQuit method")
//			},
//			RenderCommonSelectCommandsFunc: func(commands string, description string, equivalent string) string {
//				panic("mock out the RenderCommonSelectCommands method")
//			},
//		}
//
//		// use mockedtemplates in code that requires templates
//		// and then make assertions.
//
//	}
type templatesMock struct {
	// RenderCommonQuitFunc mocks the RenderCommonQuit method.
	RenderCommonQuitFunc func() string

	// RenderCommonSelectCommandsFunc mocks the RenderCommonSelectCommands method.
	RenderCommonSelectCommandsFunc func(commands string, description string, equivalent string) string

	// calls tracks calls to the methods.
	calls struct {
		// RenderCommonQuit holds details about calls to the RenderCommonQuit method.
		RenderCommonQuit []struct {
		}
		// RenderCommonSelectCommands holds details about calls to the RenderCommonSelectCommands method.
		RenderCommonSelectCommands []struct {
			// Commands is the commands argument value.
			Commands string
			// Description is the description argument value.
			Description string
			// Equivalent is the equivalent argument value.
			Equivalent string
		}
	}
	lockRenderCommonQuit           sync.RWMutex
	lockRenderCommonSelectCommands sync.RWMutex
}

// RenderCommonQuit calls RenderCommonQuitFunc.
func (mock *templatesMock) RenderCommonQuit() string {
	if mock.RenderCommonQuitFunc == nil {
		panic("templatesMock.RenderCommonQuitFunc: method is nil but templates.RenderCommonQuit was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRenderCommonQuit.Lock()
	mock.calls.RenderCommonQuit = append(mock.calls.RenderCommonQuit, callInfo)
	mock.lockRenderCommonQuit.Unlock()
	return mock.RenderCommonQuitFunc()
}

// RenderCommonQuitCalls gets all the calls that were made to RenderCommonQuit.
// Check the length with:
//
//	len(mockedtemplates.RenderCommonQuitCalls())
func (mock *templatesMock) RenderCommonQuitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRenderCommonQuit.RLock()
	calls = mock.calls.RenderCommonQuit
	mock.lockRenderCommonQuit.RUnlock()
	return calls
}

// RenderCommonSelectCommands calls RenderCommonSelectCommandsFunc.
func (mock *templatesMock) RenderCommonSelectCommands(commands string, description string, equivalent string) string {
	if mock.RenderCommonSelectCommandsFunc == nil {
		panic("templatesMock.RenderCommonSelectCommandsFunc: method is nil but templates.RenderCommonSelectCommands was just called")
	}
	callInfo := struct {
		Commands    string
		Description string
		Equivalent  string
	}{
		Commands:    commands,
		Description: description,
		Equivalent:  equivalent,
	}
	mock.lockRenderCommonSelectCommands.Lock()
	mock.calls.RenderCommonSelectCommands = append(mock.calls.RenderCommonSelectCommands, callInfo)
	mock.lockRenderCommonSelectCommands.Unlock()
	return mock.RenderCommonSelectCommandsFunc(commands, description, equivalent)
}

// RenderCommonSelectCommandsCalls gets all the calls that were made to RenderCommonSelectCommands.
// Check the length with:
//
//	len(mockedtemplates.RenderCommonSelectCommandsCalls())
func (mock *templatesMock) RenderCommonSelectCommandsCalls() []struct {
	Commands    string
	Description string
	Equivalent  string
} {
	var calls []struct {
		Commands    string
		Description string
		Equivalent  string
	}
	mock.lockRenderCommonSelectCommands.RLock()
	calls = mock.calls.RenderCommonSelectCommands
	mock.lockRenderCommonSelectCommands.RUnlock()
	return calls
}

// configMock is a mock implementation of config.
//
//	func TestSomethingThatUsesconfig(t *testing.T) {
//
//		// make and configure a mocked config
//		mockedconfig := &configMock{
//			GetFunc: func(path string) any {
//				panic("mock out the Get method")
//			},
//			GetStringFunc: func(path string) string {
//				panic("mock out the GetString method")
//			},
//			PathFunc: func() string {
//				panic("mock out the Path method")
//			},
//			SetFunc: func(path string, value any) error {
//				panic("mock out the Set method")
//			},
//			ViewFunc: func() string {
//				panic("mock out the View method")
//			},
//		}
//
//		// use mockedconfig in code that requires config
//		// and then make assertions.
//
//	}
type configMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(path string) any

	// GetStringFunc mocks the GetString method.
	GetStringFunc func(path string) string

	// PathFunc mocks the Path method.
	PathFunc func() string

	// SetFunc mocks the Set method.
	SetFunc func(path string, value any) error

	// ViewFunc mocks the View method.
	ViewFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Path is the path argument value.
			Path string
		}
		// GetString holds details about calls to the GetString method.
		GetString []struct {
			// Path is the path argument value.
			Path string
		}
		// Path holds details about calls to the Path method.
		Path []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Path is the path argument value.
			Path string
			// Value is the value argument value.
			Value any
		}
		// View holds details about calls to the View method.
		View []struct {
		}
	}
	lockGet       sync.RWMutex
	lockGetString sync.RWMutex
	lockPath      sync.RWMutex
	lockSet       sync.RWMutex
	lockView      sync.RWMutex
}

// Get calls GetFunc.
func (mock *configMock) Get(path string) any {
	if mock.GetFunc == nil {
		panic("configMock.GetFunc: method is nil but config.Get was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(path)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedconfig.GetCalls())
func (mock *configMock) GetCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetString calls GetStringFunc.
func (mock *configMock) GetString(path string) string {
	if mock.GetStringFunc == nil {
		panic("configMock.GetStringFunc: method is nil but config.GetString was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGetString.Lock()
	mock.calls.GetString = append(mock.calls.GetString, callInfo)
	mock.lockGetString.Unlock()
	return mock.GetStringFunc(path)
}

// GetStringCalls gets all the calls that were made to GetString.
// Check the length with:
//
//	len(mockedconfig.GetStringCalls())
func (mock *configMock) GetStringCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGetString.RLock()
	calls = mock.calls.GetString
	mock.lockGetString.RUnlock()
	return calls
}

// Path calls PathFunc.
func (mock *configMock) Path() string {
	if mock.PathFunc == nil {
		panic("configMock.PathFunc: method is nil but config.Path was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPath.Lock()
	mock.calls.Path = append(mock.calls.Path, callInfo)
	mock.lockPath.Unlock()
	return mock.PathFunc()
}

// PathCalls gets all the calls that were made to Path.
// Check the length with:
//
//	len(mockedconfig.PathCalls())
func (mock *configMock) PathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPath.RLock()
	calls = mock.calls.Path
	mock.lockPath.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *configMock) Set(path string, value any) error {
	if mock.SetFunc == nil {
		panic("configMock.SetFunc: method is nil but config.Set was just called")
	}
	callInfo := struct {
		Path  string
		Value any
	}{
		Path:  path,
		Value: value,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(path, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedconfig.SetCalls())
func (mock *configMock) SetCalls() []struct {
	Path  string
	Value any
} {
	var calls []struct {
		Path  string
		Value any
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// View calls ViewFunc.
func (mock *configMock) View() string {
	if mock.ViewFunc == nil {
		panic("configMock.ViewFunc: method is nil but config.View was just called")
	}
	callInfo := struct {
	}{}
	mock.lockView.Lock()
	mock.calls.View = append(mock.calls.View, callInfo)
	mock.lockView.Unlock()
	return mock.ViewFunc()
}

// ViewCalls gets all the calls that were made to View.
// Check the length with:
//
//	len(mockedconfig.ViewCalls())
func (mock *configMock) ViewCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockView.RLock()
	calls = mock.calls.View
	mock.lockView.RUnlock()
	return calls
}
