// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package stubs

import (
	servicesConfig "github.com/queeck/cli/internal/services/config"
	"sync"
)

// configMock is a mock implementation of config.
//
//	func TestSomethingThatUsesconfig(t *testing.T) {
//
//		// make and configure a mocked config
//		mockedconfig := &configMock{
//			GetFunc: func(path string) (any, bool) {
//				panic("mock out the Get method")
//			},
//			GetStringFunc: func(path string) (string, bool) {
//				panic("mock out the GetString method")
//			},
//			KeysFunc: func() []string {
//				panic("mock out the Keys method")
//			},
//			PathFunc: func() string {
//				panic("mock out the Path method")
//			},
//			SaveFunc: func() error {
//				panic("mock out the Save method")
//			},
//			SetFunc: func(path string, value any) error {
//				panic("mock out the Set method")
//			},
//			TypeFunc: func(path string) servicesConfig.ValueType {
//				panic("mock out the Type method")
//			},
//			ViewFunc: func() string {
//				panic("mock out the View method")
//			},
//		}
//
//		// use mockedconfig in code that requires config
//		// and then make assertions.
//
//	}
type configMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(path string) (any, bool)

	// GetStringFunc mocks the GetString method.
	GetStringFunc func(path string) (string, bool)

	// KeysFunc mocks the Keys method.
	KeysFunc func() []string

	// PathFunc mocks the Path method.
	PathFunc func() string

	// SaveFunc mocks the Save method.
	SaveFunc func() error

	// SetFunc mocks the Set method.
	SetFunc func(path string, value any) error

	// TypeFunc mocks the Type method.
	TypeFunc func(path string) servicesConfig.ValueType

	// ViewFunc mocks the View method.
	ViewFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Path is the path argument value.
			Path string
		}
		// GetString holds details about calls to the GetString method.
		GetString []struct {
			// Path is the path argument value.
			Path string
		}
		// Keys holds details about calls to the Keys method.
		Keys []struct {
		}
		// Path holds details about calls to the Path method.
		Path []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Path is the path argument value.
			Path string
			// Value is the value argument value.
			Value any
		}
		// Type holds details about calls to the Type method.
		Type []struct {
			// Path is the path argument value.
			Path string
		}
		// View holds details about calls to the View method.
		View []struct {
		}
	}
	lockGet       sync.RWMutex
	lockGetString sync.RWMutex
	lockKeys      sync.RWMutex
	lockPath      sync.RWMutex
	lockSave      sync.RWMutex
	lockSet       sync.RWMutex
	lockType      sync.RWMutex
	lockView      sync.RWMutex
}

// Get calls GetFunc.
func (mock *configMock) Get(path string) (any, bool) {
	if mock.GetFunc == nil {
		panic("configMock.GetFunc: method is nil but config.Get was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(path)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedconfig.GetCalls())
func (mock *configMock) GetCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetString calls GetStringFunc.
func (mock *configMock) GetString(path string) (string, bool) {
	if mock.GetStringFunc == nil {
		panic("configMock.GetStringFunc: method is nil but config.GetString was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGetString.Lock()
	mock.calls.GetString = append(mock.calls.GetString, callInfo)
	mock.lockGetString.Unlock()
	return mock.GetStringFunc(path)
}

// GetStringCalls gets all the calls that were made to GetString.
// Check the length with:
//
//	len(mockedconfig.GetStringCalls())
func (mock *configMock) GetStringCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGetString.RLock()
	calls = mock.calls.GetString
	mock.lockGetString.RUnlock()
	return calls
}

// Keys calls KeysFunc.
func (mock *configMock) Keys() []string {
	if mock.KeysFunc == nil {
		panic("configMock.KeysFunc: method is nil but config.Keys was just called")
	}
	callInfo := struct {
	}{}
	mock.lockKeys.Lock()
	mock.calls.Keys = append(mock.calls.Keys, callInfo)
	mock.lockKeys.Unlock()
	return mock.KeysFunc()
}

// KeysCalls gets all the calls that were made to Keys.
// Check the length with:
//
//	len(mockedconfig.KeysCalls())
func (mock *configMock) KeysCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockKeys.RLock()
	calls = mock.calls.Keys
	mock.lockKeys.RUnlock()
	return calls
}

// Path calls PathFunc.
func (mock *configMock) Path() string {
	if mock.PathFunc == nil {
		panic("configMock.PathFunc: method is nil but config.Path was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPath.Lock()
	mock.calls.Path = append(mock.calls.Path, callInfo)
	mock.lockPath.Unlock()
	return mock.PathFunc()
}

// PathCalls gets all the calls that were made to Path.
// Check the length with:
//
//	len(mockedconfig.PathCalls())
func (mock *configMock) PathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPath.RLock()
	calls = mock.calls.Path
	mock.lockPath.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *configMock) Save() error {
	if mock.SaveFunc == nil {
		panic("configMock.SaveFunc: method is nil but config.Save was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc()
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedconfig.SaveCalls())
func (mock *configMock) SaveCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *configMock) Set(path string, value any) error {
	if mock.SetFunc == nil {
		panic("configMock.SetFunc: method is nil but config.Set was just called")
	}
	callInfo := struct {
		Path  string
		Value any
	}{
		Path:  path,
		Value: value,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(path, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedconfig.SetCalls())
func (mock *configMock) SetCalls() []struct {
	Path  string
	Value any
} {
	var calls []struct {
		Path  string
		Value any
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}

// Type calls TypeFunc.
func (mock *configMock) Type(path string) servicesConfig.ValueType {
	if mock.TypeFunc == nil {
		panic("configMock.TypeFunc: method is nil but config.Type was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockType.Lock()
	mock.calls.Type = append(mock.calls.Type, callInfo)
	mock.lockType.Unlock()
	return mock.TypeFunc(path)
}

// TypeCalls gets all the calls that were made to Type.
// Check the length with:
//
//	len(mockedconfig.TypeCalls())
func (mock *configMock) TypeCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockType.RLock()
	calls = mock.calls.Type
	mock.lockType.RUnlock()
	return calls
}

// View calls ViewFunc.
func (mock *configMock) View() string {
	if mock.ViewFunc == nil {
		panic("configMock.ViewFunc: method is nil but config.View was just called")
	}
	callInfo := struct {
	}{}
	mock.lockView.Lock()
	mock.calls.View = append(mock.calls.View, callInfo)
	mock.lockView.Unlock()
	return mock.ViewFunc()
}

// ViewCalls gets all the calls that were made to View.
// Check the length with:
//
//	len(mockedconfig.ViewCalls())
func (mock *configMock) ViewCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockView.RLock()
	calls = mock.calls.View
	mock.lockView.RUnlock()
	return calls
}

// inputMock is a mock implementation of input.
//
//	func TestSomethingThatUsesinput(t *testing.T) {
//
//		// make and configure a mocked input
//		mockedinput := &inputMock{
//			ReadFunc: func(p []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//		}
//
//		// use mockedinput in code that requires input
//		// and then make assertions.
//
//	}
type inputMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(p []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// P is the p argument value.
			P []byte
		}
	}
	lockRead sync.RWMutex
}

// Read calls ReadFunc.
func (mock *inputMock) Read(p []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("inputMock.ReadFunc: method is nil but input.Read was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(p)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedinput.ReadCalls())
func (mock *inputMock) ReadCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// outputMock is a mock implementation of output.
//
//	func TestSomethingThatUsesoutput(t *testing.T) {
//
//		// make and configure a mocked output
//		mockedoutput := &outputMock{
//			WriteFunc: func(p []byte) (int, error) {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedoutput in code that requires output
//		// and then make assertions.
//
//	}
type outputMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(p []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// P is the p argument value.
			P []byte
		}
	}
	lockWrite sync.RWMutex
}

// Write calls WriteFunc.
func (mock *outputMock) Write(p []byte) (int, error) {
	if mock.WriteFunc == nil {
		panic("outputMock.WriteFunc: method is nil but output.Write was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(p)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedoutput.WriteCalls())
func (mock *outputMock) WriteCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
