// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package functional

import (
	"sync"
)

// inputMock is a mock implementation of input.
//
//	func TestSomethingThatUsesinput(t *testing.T) {
//
//		// make and configure a mocked input
//		mockedinput := &inputMock{
//			ReadFunc: func(p []byte) (int, error) {
//				panic("mock out the Read method")
//			},
//		}
//
//		// use mockedinput in code that requires input
//		// and then make assertions.
//
//	}
type inputMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(p []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// P is the p argument value.
			P []byte
		}
	}
	lockRead sync.RWMutex
}

// Read calls ReadFunc.
func (mock *inputMock) Read(p []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("inputMock.ReadFunc: method is nil but input.Read was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(p)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedinput.ReadCalls())
func (mock *inputMock) ReadCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// outputMock is a mock implementation of output.
//
//	func TestSomethingThatUsesoutput(t *testing.T) {
//
//		// make and configure a mocked output
//		mockedoutput := &outputMock{
//			WriteFunc: func(p []byte) (int, error) {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedoutput in code that requires output
//		// and then make assertions.
//
//	}
type outputMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(p []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// P is the p argument value.
			P []byte
		}
	}
	lockWrite sync.RWMutex
}

// Write calls WriteFunc.
func (mock *outputMock) Write(p []byte) (int, error) {
	if mock.WriteFunc == nil {
		panic("outputMock.WriteFunc: method is nil but output.Write was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(p)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedoutput.WriteCalls())
func (mock *outputMock) WriteCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
